/** 
Find the kth largest element in an unsorted array. Note that it is the kth largest element in the sorted order, not the kth distinct element.

Example 1:

Input: [3,2,1,5,6,4] and k = 2
Output: 5

Example 2:

Input: [3,2,3,1,2,4,5,5,6] and k = 4
Output: 4
**/

/** Solution1: sort nums and put in priority queue
Time complexity: O(NlongN)
Space complexity: O(N)
**/

/** Solution2: Min heap
Time complexity: O(Nlongk)
Space complexity: O(k)
**/
class Solution {
public:
    int findKthLargest(vector<int>& nums, int k) {
        priority_queue<int, vector<int>, greater<int>> pq;
        for(int i=0; i<nums.size(); i++){
            pq.push(nums[i]);
            if(pq.size() > k) pq.pop();
        }
        return pq.top();
    }
};

/** Solution3: Quick Select
Time complexity: O(n)
Space complexity
**/


class Solution {
public:
    int findKthLargest(vector<int>& nums, int k) {
        if( nums.size() ==0 || k<=0) return -1;
        int left = 0, right = nums.size()-1;
        
        while(true){
            int pos = partition(nums, left, right);
            if( pos == k-1) return nums[pos];
            if( pos > k-1 ) right = pos -1;
            else left = pos+1;
        }    
    }
    
    int partition(vector<int>& nums, int left, int right){
        int pivot = nums[left];
        int l = left+1, r = right;
        while( l <= r ){
            if(nums[l] < pivot && nums[r] > pivot)
                swap(nums[l++], nums[r--]);
            
            while (l <= r && nums[l] >= pivot) l++; 
            while (l <= r && nums[r] <= pivot) r--;
        }
        swap(nums[left], nums[r]);
        return r;
    }
  
};

