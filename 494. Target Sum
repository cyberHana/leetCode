/**
 You are given a list of non-negative integers, a1, a2, ..., an, and a target, S. Now you have 2 symbols + and -. For each integer, you should choose one from + and - as its new symbol.

Find out how many ways to assign symbols to make sum of integers equal to target S.

Example 1:

Input: nums is [1, 1, 1, 1, 1], S is 3. 
Output: 5
Explanation: 

-1+1+1+1+1 = 3
+1-1+1+1+1 = 3
+1+1-1+1+1 = 3
+1+1+1-1+1 = 3
+1+1+1+1-1 = 3

There are 5 ways to assign symbols to make the sum of nums be target 3.

Note:

    The length of the given array is positive and will not exceed 20.
    The sum of elements in the given array will not exceed 1000.
    Your output answer is guaranteed to be fitted in a 32-bit integer.
**/

/** solution: DP1 (2D)
Time complexity: O(n*sum)
Space complexity: O(n*sum)
**/
class Solution {
public:
    int findTargetSumWays(vector<int>& nums, int S) {
        const int size = nums.size();
        const int sum = accumulate(nums.begin(), nums.end(), 0);
        if(sum<S) return 0;
        int offset = sum;
      // ways[i][j] means total ways to sum up to (j - offset) using nums[0] ~ nums[i - 1].
        vector<vector<int>> ways(size+1, vector<int>(sum+offset+1, 0));
        ways[0][offset] = 1;
        
        for(int i=0; i<size; i++){
            for(int j=nums[i]; j < 2 * sum + 1 - nums[i]; j++){
                if(ways[i][j]){
                    ways[i+1][j-nums[i]] += ways[i][j];
                    ways[i+1][j+nums[i]] += ways[i][j];
                }
            }
        }
        return ways[size][S+offset];
    }
};


/** solution: DP2 (1 D)
Time complexity: O(n*sum)
Space complexity: O(sum)
**/
class Solution{
public:
    int findTargetSumWays(vector<int>& nums, int S){
        const int n = nums.size();
        const int sum = accumulate(nums.begin(), nums.end(), 0);
        if(sum < S) return 0;
        int offset = sum;
        int maxRange = 2*sum+1;
        vector<int> ways(maxRange, 0);
        ways[offset] = 1;
        
        for(int num:nums){
            vector<int> tmp(maxRange,0);
            for(int j = num; j < maxRange-num; j++){
                if(ways[j]){
                    tmp[j-num] += ways[j];
                    tmp[j+num] += ways[j];
                }
            }
            swap(ways, tmp);
        }
        return ways[offset+S];
    }
};

/** Solution3: DFS 
Time complexity: O(2^n)
Space complexity: O(n)
**/
class Solution{
public:
    int findTargetSumWays(vector<int>& nums, int S){
        const int sum = accumulate(nums.begin(), nums.end(), 0);
        if(sum < S) return 0;
        int ans = 0;
        dfs(nums, 0, S, ans);
        return ans;
    }
    void dfs(vector<int>& nums, int d, int target, int& ans){
        if(d==nums.size()){
            if(target==0) ans++;
            return;
        }
        
        dfs(nums, d+1, target-nums[d], ans); // 針對nums[d] 使用加號
        dfs(nums, d+1, target+nums[d], ans); // 針對nums[d] 使用減號
    }
};
