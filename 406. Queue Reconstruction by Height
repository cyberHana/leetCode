/** 
Suppose you have a random list of people standing in a queue. Each person is described by a pair of integers (h, k), where h is the height of the person and k is the number of people in front of this person who have a height greater than or equal to h. Write an algorithm to reconstruct the queue.

Note:
The number of people is less than 1,100.
 

Example

Input:
[[7,0], [4,4], [7,1], [5,0], [6,1], [5,2]]

Output:
[[5,0], [7,0], [5,2], [6,1], [4,4], [7,1]]
**/

/**Initially, order people by decreasing order of height and increasing order of "taller or equal height people in front" number:
[7,0],[7,1],[6,1],[5,0],[5,2],[4,4]

This will be the order of entry into the separate reconstructed queue. 
Iterating over the people, at any given person during the insert, 
it will be guaranteed that everyone in the existing queue is at least as tall as them--because this is the case, 
we can insert people on the basis of their "people who are taller or the same height as me who are in front of me" number alone. 
**/

/** 
** Time complexity: O(nlogn)
** Space complexity: O(n)


class Solution {
public:
    vector<vector<int>> reconstructQueue(vector<vector<int>>& people) {
        sort(people.begin(), people.end(),[](auto& v1, auto& v2){
            return v1[0] > v2[0] || (v1[0]==v2[0] && v1[1]<v2[1]);
        });
        
        vector<vector<int>> ans;
        for(auto& p:people){
            ans.insert(ans.begin()+p[1],p);
        }
        return ans;
    }
};
