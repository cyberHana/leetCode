/**
Given a string, your task is to count how many palindromic substrings in this string.

The substrings with different start indexes or end indexes are counted as different substrings even they consist of same characters.

Example 1:

Input: "abc"
Output: 3
Explanation: Three palindromic strings: "a", "b", "c".

 

Example 2:

Input: "aaa"
Output: 6
Explanation: Six palindromic strings: "a", "a", "a", "aa", "aa", "aaa".

**/
/**
Solution1:Brute Force
Time complexity: O(n^2)
Space complexity: O(1)
**/
class Solution {
public:
    int countSubstrings(string s) {
        int count = 0;
        for(int i=0; i<s.length(); i++){
            count += cntHelper(s, i, i);
            count += cntHelper(s, i, i+1);
        }
        return count;
    }
    
    int cntHelper(string s, int l, int r){
        int cnt=0;
        while(l>=0 && r<s.length() && s[l]==s[r]){
            cnt++;
            l--;
            r++;
        }
        return cnt;
    }
};

/**
Solution1:DP
Time complexity: O(n^2)
Space complexity: O(n^2)
**/
class Solution {
public:
    //DP 
    int countSubstrings(string s) {
        if(s.length()==0 ) return 0;
        int count=0;
        int n=s.length();
        bool dp[n][n];
        for(int i=n-1; i >=0; i--){
            for(int j=i; j<n; j++){
                if(i==j) dp[i][j]= true;
                else if(i+1 == j) dp[i][j] = s[i] == s[j];
                else dp[i][j] = s[i] == s[j] && dp[i+1][j-1];
                
                if(dp[i][j]) count++;
            }
        }
        return count;
    }
};

