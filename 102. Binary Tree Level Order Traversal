/**
Given a binary tree, return the level order traversal of its nodes' values. (ie, from left to right, level by level).

For example:
Given binary tree [3,9,20,null,null,15,7],

    3
   / \
  9  20
    /  \
   15   7

return its level order traversal as:

[
  [3],
  [9,20],
  [15,7]
]
**/

/**Solution1: DFS
Time complexity: O(n)
Space complexity: O(n)
**/
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x): val(x), left(nullptr), right(nullptr) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> levelOrder(TreeNode* root) {
        
        vector<vector<int>> ans;
        int depth=0;
        dfs(root, ans, depth);
        return ans;
    }
    
    void  dfs(TreeNode* root, vector<vector<int>>& ans, int depth){
        if(!root) return;
        while(ans.size() <= depth) ans.push_back({});
        
        if(root->left) dfs(root->left,ans, depth+1);
        if(root->right) dfs(root->right,ans, depth+1);
        ans[depth].push_back(root->val);
        
       
    }
    
};

/**Solution1: BFS
Time complexity: O(n)
Space complexity: O(n)
**/
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x): val(x), left(nullptr), right(nullptr) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> levelOrder(TreeNode* root) {
        
        vector<vector<int>> ans;
        dfs(root, ans);
        return ans;
    }
    
    void dfs(TreeNode* root, vector<vector<int>>& ans){
        if(!root) return;
        vector<TreeNode*> cur, next;
        cur.push_back(root);
        while(!cur.empty()){
            ans.push_back({});
            for(TreeNode* node: cur){
                ans.back().push_back(node->val);
                if(node->left) next.push_back(node->left);
                if(node->right) next.push_back(node->right);
            }
            cur.swap(next);
            next.clear();
        }
    }
    
};
