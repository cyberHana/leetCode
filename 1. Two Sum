/** 
Given an array of integers, return indices of the two numbers such that they add up to a specific target.

You may assume that each input would have exactly one solution, and you may not use the same element twice.

Example:

Given nums = [2, 7, 11, 15], target = 9,

Because nums[0] + nums[1] = 2 + 7 = 9,
return [0, 1].
**/

/** Solution1: Brute Force
Time complexity : O(n^2)
Space complexity : O(1)
**/

class Solution1 {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        vector<int> vec;
        for(int i=0; i<nums.size()-1; i++){
            for(int j = i+1; j< nums.size(); j++){
                if( (nums[i]+nums[j]) == target){
                    vec = {i, j};
                    break;
                }
            }
        }
        return vec;
    }
};

/** Solution2: One pass hash table
Time complexity : O(n)
Space complexity : O(n)
**/
class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        
        unordered_map<int, int> numMap;
        for(int i=0; i<nums.size(); i++){
            if(numMap.count(nums[i]) != 0){
                vector<int> vec = {numMap[nums[i]], i};
                return vec;
            }else{
                numMap[target - nums[i]] = i;
            }
        }
        return {};
    }
};


