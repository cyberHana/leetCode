/** Given a collection of distinct integers, return all possible permutations.

Example:

Input: [1,2,3]
Output:
[
  [1,2,3],
  [1,3,2],
  [2,1,3],
  [2,3,1],
  [3,1,2],
  [3,2,1]
]
**/

/**
Time complexity: O(n!)
Space complexity: O(n)
**/

class Solution {
public:
    vector<vector<int>> permute(vector<int>& nums) {
        vector<vector<int>> res;
        vector<int> path;
        vector<bool> used(nums.size(), false);
        dfs(nums, used, path, res);
        return res;
    }
    
    void dfs(const vector<int>& nums, vector<bool>& used, vector<int>& path,  vector<vector<int>>& res){
        if(path.size() == nums.size()){
            res.push_back(path);
            return;
        }
        for(int i=0; i<nums.size(); i++){
            if(!used[i]){
                used[i] = true;
                path.push_back(nums[i]);        
                dfs(nums, used, path, res);
                path.pop_back();
                used[i] = false;
            }
        }
    }
};
