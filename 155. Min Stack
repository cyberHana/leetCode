/**
Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.

    push(x) -- Push element x onto stack.
    pop() -- Removes the element on top of the stack.
    top() -- Get the top element.
    getMin() -- Retrieve the minimum element in the stack.

**/

class MinStack {
private:
    vector<int> nums;
    int minNum;
public:
    /** initialize your data structure here. */
    MinStack() {
        this->minNum = INT_MAX;
    }
    
    void push(int x) {
        nums.push_back(x);
        this->minNum = this->minNum > x ? x : this->minNum;
    }
    
    void pop() {
        int num = nums[nums.size()-1]; 
        nums.pop_back();
        if(num == this->minNum) findMin();
    }
    
    int top() {
        return nums.back();
    }
    
    int getMin() {
        return this->minNum;
    }
    void findMin(){
        this->minNum = INT_MAX;
        for(auto num: nums){
            if(this->minNum > num) this->minNum = num;
        }
    }
};

/**
 * Your MinStack object will be instantiated and called as such:
 * MinStack* obj = new MinStack();
 * obj->push(x);
 * obj->pop();
 * int param_3 = obj->top();
 * int param_4 = obj->getMin();
 */
