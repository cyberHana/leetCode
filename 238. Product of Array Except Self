/**
Given an array nums of n integers where n > 1,  return an array output such that output[i] is equal to the product of all the elements of nums except nums[i].

Example:

Input:  [1,2,3,4]
Output: [24,12,8,6]

Constraint: It's guaranteed that the product of the elements of any prefix or suffix of the array (including the whole array) fits in a 32 bit integer.

Note: Please solve it without division and in O(n).

Follow up:
Could you solve it with constant space complexity? (The output array does not count as extra space for the purpose of space complexity analysis.)
**/

/**
Approach 1: Left and Right product lists
Time complexity: O(n)
Space complexity: O(n)
**/

class Solution {
public:
    vector<int> productExceptSelf(vector<int>& nums) {
        vector<int> ans;
        if(nums.size()==0 ) return ans;
        
        vector<int> left(nums.size()); left[0] = 1;
        vector<int> right(nums.size()); right[nums.size()-1] = 1;
        
        for(int i=1; i<nums.size(); i++)
            left[i] = left[i-1] * nums[i-1];
        for(int i= nums.size()-2; i>=0; i--)
            right[i] = right[i+1] * nums[i+1];
        
        for(int i=0; i<nums.size(); i++)
            ans.push_back(left[i] * right[i]);
        
        return ans;
    }
};

/**
Approach 2: O(1) space approach, use a int to keep track of right array
Time complexity: O(n)
Space complexity: O(1)
**/



class Solution {
public:
    vector<int> productExceptSelf(vector<int>& nums) {
        vector<int> left(nums.size());
        if(nums.size()==0 ) return left;
         left[0] = 1;
        
        for(int i=1; i<nums.size(); i++)
            left[i] = left[i-1] * nums[i-1];
        
        
        int right=1;
        for(int i=nums.size()-1; i>=0; i--){
            left[i] = (left[i] * right);
            right = right * nums[i];
        }
        
        
        return left;
    }
};
