/**
Given a linked list, determine if it has a cycle in it.

To represent a cycle in the given linked list, we use an integer pos which represents the position (0-indexed) in the linked list where tail connects to. If pos is -1, then there is no cycle in the linked list.

 

Example 1:

Input: head = [3,2,0,-4], pos = 1
Output: true
Explanation: There is a cycle in the linked list, where tail connects to the second node.

**/

/** solution1: hash table
**  Time complexity: O(n)
**  Space complexity: O(n)
**/ 

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution1 {
public:
    bool hasCycle(ListNode *head) {
        unordered_set<ListNode *> seenMap;
        
        while(head){
            if(seenMap.find(head) != seenMap.end()) return true;
            seenMap.insert(head);
            head = head->next;
        }
        return false;
    }
};

/** solution2: fast & slow pointers
**  Time complexity: O(n)
**  Space complexity: O(1)
**/ 
class Solution2{
  public:
  bool hasCycle(ListNode *head){
    ListNode *slow = head;
    ListNode *fast = head;
    while(fast && fast->next){
      slow = slow->next;
      fast = fast->next->next;
      if(slow == fast) return true;
    }
    return false;
 }
};
