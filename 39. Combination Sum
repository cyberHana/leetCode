/** 
Given a set of candidate numbers (candidates) (without duplicates) and a target number (target), find all unique combinations in candidates where the candidate numbers sums to target.

The same repeated number may be chosen from candidates unlimited number of times.

Note:

    All numbers (including target) will be positive integers.
    The solution set must not contain duplicate combinations.

Example 1:

Input: candidates = [2,3,6,7], target = 7,
A solution set is:
[
  [7],
  [2,2,3]
]

Example 2:

Input: candidates = [2,3,5], target = 8,
A solution set is:
[
  [2,2,2,2],
  [2,3,3],
  [3,5]
]

**/
/** Solution: DFS - combination solution
Time complexity:  O(k^n), k = max(target / candidates[i]);
Space complexity:
**/

class Solution {
public:
    vector<vector<int>> combinationSum(vector<int>& candidates, int target) {
        if(candidates.size() ==0) return {};
        
        vector<vector<int>> ans;
        vector<int> cur;
        sort(candidates.begin(), candidates.end());
        helper(candidates, target, 0, cur, ans);
        return ans;
    }
    
    void helper(const vector<int>& candidates, int target, int d, vector<int>& cur, vector<vector<int>>& ans){
        
        if(target == 0){
            ans.push_back(cur);
            return;
        }
            
        for(int i=d; i < candidates.size(); i++){
            if(candidates[i] > target) break;
            cur.push_back(candidates[i]);
            helper(candidates, target - candidates[i], i, cur, ans);
            cur.pop_back();
        }
    }
    
};

//** Solution2: result length ordered output

class Solution {
public:
    vector<vector<int>> combinationSum(vector<int>& candidates, int target) {
        if(candidates.size() ==0) return {};
        
        vector<vector<int>> ans;
        vector<int> cur;
        sort(candidates.begin(), candidates.end());
        for(int n=1; n<= target / candidates[0]; n++)
            helper(candidates, target, 0, 0 , n, cur, ans);
        return ans;
    }
    
    void helper(const vector<int>& candidates, int target, int d, int l, int n,  vector<int>& cur, vector<vector<int>>& ans){
        
        if(l == n){
            if(target == 0){
                ans.push_back(cur);
                return;
            }
        }
            
        for(int i=d; i < candidates.size(); i++){
            if(candidates[i] > target) break;
            cur.push_back(candidates[i]);
            helper(candidates, target - candidates[i], i, l+1, n, cur, ans);
            cur.pop_back();
        }
    }
    
};
