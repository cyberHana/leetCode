/**
Given a set of distinct integers, nums, return all possible subsets (the power set).

Note: The solution set must not contain duplicate subsets.

Example:

Input: nums = [1,2,3]
Output:
[
  [3],
  [1],
  [2],
  [1,2,3],
  [1,3],
  [2,3],
  [1,2],
  []
]
**/

/** Solution: Combination approach ( doesnt care the order)
Time complexity:  O(n*2^n)
Space complexity: O(n)
**/
class Solution {
public:
    vector<vector<int>> subsets(vector<int>& nums) {
        vector<vector<int>> ans;
        vector<int> cur;
        for(int i=0; i<=nums.size(); i++){
            helper(nums, ans, cur, i, 0);
        }
        return ans;
    }
private: 
    void helper(const vector<int>& nums,vector<vector<int>>& ans, vector<int> cur, int n, int idx ){
        if(cur.size() == n){
            ans.push_back(cur);
            return;
        }
        for(int i=idx; i<nums.size(); i++){
            cur.push_back(nums[i]);
            helper(nums, ans, cur, n, i+1);
            cur.pop_back();
        }
    }
};


/** Solution: Permutation approach ( Care the order ) 
 -- > this will list out permutation with all kinds of order, not expected answer in this question)
Time complexity:  O(n*n!)
Space complexity: O(n)
**/class Solution {
public:
    vector<vector<int>> subsets(vector<int>& nums) {
        vector<vector<int>> ans;
        vector<int> cur;
        vector<bool> used(nums.size(), false);
        for(int i=0; i<=nums.size(); i++){
            helper(nums, ans, cur, i, 0, used);
        }
        return ans;
    }
private: 
    void helper(const vector<int>& nums,vector<vector<int>>& ans, vector<int> cur, int n, int idx, vector<bool>& used){
        if(cur.size() == n){
            ans.push_back(cur);
            return;
        }
        for(int i=0; i<nums.size(); i++){
            if(used[i]) continue;
            
            used[i] = true;
            cur.push_back(nums[i]);
            helper(nums, ans, cur, n, i, used);
            cur.pop_back();
            used[i] = false;
        }
    }
};


/** Solution: Bit operation (using bit shifting, no DFS)
Time complexity: O(n*2^n)
Space complexity: O(1)
**/
class Solution {
public:
    vector<vector<int>> subsets(vector<int>& nums) {
        vector<vector<int>> ans;
        const int n = nums.size();
        
        for(int s=0; s< 1<<n; s++){
            vector<int> cur;
            for(int j=0; j<n; j++){
                if(s & (1<<j)) cur.push_back(nums[j]);
            }
            ans.push_back(cur);
        }
        
        return ans;
    }
};
