/**
* Write an algorithm to determine if a number n is "happy".

* A happy number is a number defined by the following process: Starting with any positive integer, replace the number by the sum of the squares of its digits, and repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1. Those numbers for which this process ends in 1 are happy numbers.

* Return True if n is a happy number, and False if not.

* Example: 

* Input: 19
* Output: true
* Explanation: 
* 12 + 92 = 82
* 82 + 22 = 68
* 62 + 82 = 100
* 12 + 02 + 02 = 1
*/

class Solution {
public:
    bool isHappy(int n) {
        vector<int> a;
        int sum = 0; 
        int m;
        if(n<1) return false;
        while(n != 1){
            a.push_back(n);
            sum =0;
            
            while(n>0){
                sum = sum + pow(n%10,2);
                n = n/10;
            }
            for(int i=0; i<a.size(); i++){
                if(sum == a[i]) return false;
            }
//            if(find (a.begin(), a.end(), sum) != a.end()) return false;
            n=sum;
        }
        return true;
    }
};
