/** Given an integer array, you need to find one continuous subarray that if you only sort this subarray in ascending order, then the whole array will be sorted in ascending order, too.

You need to find the shortest such subarray and output its length.

Example 1:

Input: [2, 6, 4, 8, 10, 9, 15]
Output: 5
Explanation: You need to sort [6, 4, 8, 10, 9] in ascending order to make the whole array sorted in ascending order.
**/

/** Solution0: Brute Force: TLE
** Time complexity: O(n^2)
** Space complexity: O(1)
**/ 
class Solution0 {
public:
    int findUnsortedSubarray(vector<int>& nums) {
        int l=nums.size();
        int r=0;
        bool change=false; 
        for(int i=0; i<nums.size()-1; i++){
            for(int j=i+1; j<nums.size(); j++){
                if(nums[j] < nums[i]){
                    l = min(l, i);
                    r = max(r, j);
                    change = true;
                }
            }
        }
        if(change)  return r-l < 0? 0: r-l+1;
        return 0;
    }
};

/** Solution1: sorting nums and compare with orignal nums
** Time complexity: O(nlogn)
** Space complexity: O(n)
**/
class Solution {
public:
    int findUnsortedSubarray(vector<int>& nums) {
        vector<int> nums2 = nums;
        sort(nums2.begin(), nums2.end());
        int l=INT_MAX;
        int r = INT_MIN;
        bool change=false;
        for(int i=0; i<nums.size(); i++){
            if(nums[i] != nums2[i]) {
                l = min(l, i);
                r = max(r, i);
                change = true;
            }
        }
        if(change) return (r==l)? 0 : r-l+1; 
        else return 0;
    }
};
/** Solution2: Without Using Extra Space
** The idea behind this method is that the correct position of the minimum element in the unsorted subarray helps to determine the required left boundary. Similarly, the correct position of the maximum element in the unsorted subarray helps to determine the required right boundary
** Time complexity : O(n)
** Space complexity: O(1)
**/
class Solution2 {
public:
    int findUnsortedSubarray(vector<int>& nums) {
        int minNum = INT_MAX, maxNum = INT_MIN;
        
    
        for(int i=1; i<nums.size(); i++){
            if(nums[i-1] > nums[i]){
                minNum = min(minNum, nums[i]);
            }   
        }
        for(int i=nums.size()-2; i>=0; i--){
            if(nums[i] > nums[i+1]){
                maxNum = max(maxNum, nums[i]);   
            }  
        }
        int l=0, r=0;
        for(l=0; l< nums.size(); l++){
            if(nums[l] > minNum ) break;
        }
        for(r=nums.size()-1; r>=0; r--){
            if(nums[r] < maxNum ) break;
        }
        return r-l<0? 0: r-l+1;
        
    }
};
