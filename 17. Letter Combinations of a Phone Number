/**
Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent.

A mapping of digit to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.
Example:

Input: "23"
Output: ["ad", "ae", "af", "bd", "be", "bf", "cd", "ce", "cf"].

Note:

Although the above answer is in lexicographical order, your answer could be in any order you want.
**/

/** solution1: DFS
Time complexity: O(4^n)
Space complexity: O(4^n + n)
**/
class Solution {
public: 
    vector<string> letterCombinations(string digits){
        if(digits.empty()) return {};
        
        vector<vector<char>> letter(10);
        letter[0] = {' '};
        letter[1] = {};
        letter[2] = {'a', 'b', 'c'};
        letter[3] = {'d', 'e', 'f'};        
        letter[4] = {'g', 'h', 'i'};
        letter[5] = {'j', 'k', 'l'};
        letter[6] = {'m', 'n', 'o'};
        letter[7] = {'p', 'q', 'r', 's'};
        letter[8] = {'t', 'u', 'v'};
        letter[9] = {'w', 'x', 'y', 'z'};
        vector<string> ans;
        string cur; 
        dfs(digits, letter, 0, cur, ans);
        return ans;
    }
    
    void dfs(const string& digits, const vector<vector<char>>& letter, int d, string cur, vector<string>& ans){
        if(d == digits.length()){
            ans.push_back(cur);
            return;
        }
        for(char c: letter[digits[d]-'0']){
            cur.push_back(c);
            dfs(digits, letter, d+1, cur, ans);
            cur.pop_back();
        }
    }
};

/**Solution2: BFS 
Time complexity: O(4^n)
Space complexity: O(2* 4^n)
**/

class Solution {
public: 
    vector<string> letterCombinations(string digits){
        if(digits.empty()) return {};
        
        vector<vector<char>> letter(10);
        letter[0] = {' '};
        letter[1] = {};
        letter[2] = {'a', 'b', 'c'};
        letter[3] = {'d', 'e', 'f'};        
        letter[4] = {'g', 'h', 'i'};
        letter[5] = {'j', 'k', 'l'};
        letter[6] = {'m', 'n', 'o'};
        letter[7] = {'p', 'q', 'r', 's'};
        letter[8] = {'t', 'u', 'v'};
        letter[9] = {'w', 'x', 'y', 'z'};
        vector<string> ans;
     
        bfs(digits, letter, ans);
        return ans;
    }
    void bfs(const string& digits, const vector<vector<char>>& letter, vector<string>& ans){
        ans = {""};
        for(char digit: digits){
            vector<string> tmp;
            for(string s: ans){
                for(char c: letter[digit-'0']){
                    tmp.push_back(s+c);
                }
            }
            swap(ans, tmp);
        }
    }
    
};
