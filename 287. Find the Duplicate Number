/**
Given an array nums containing n + 1 integers where each integer is between 1 and n (inclusive), prove that at least one duplicate number must exist. Assume that there is only one duplicate number, find the duplicate one.

Example 1:

Input: [1,3,4,2,2]
Output: 2

Example 2:

Input: [3,1,3,4,2]
Output: 3
**/

/** Solution1: Sort nums
Time complexity: O(nlogn)
space complexity: O(1)
**/
class Solution1 {
public:
    int findDuplicate(vector<int>& nums) {
        sort(nums.begin(), nums.end());
        for(int i=1; i<nums.size(); i++)
        {
            if(nums[i] == nums[i-1]) return nums[i];
        }
        return -1;
    }
};

/** Solution2 : map
class Solution2 {
public:
    int findDuplicate(vector<int>& nums) {
        unordered_map<int, int> m;
        for(int i=0; i<nums.size(); i++){
            if(m.count(nums[i]) > 0)
                return nums[i];
            else
                m[nums[i]]++;
        }
        return -1;
            
    }
};

/** Solution3: Binary Search 
Time complexity: O(nlogn)
space complexity: O(1)
**/
class Solution {
public:
    
    int findDuplicate(vector<int>& nums){
        
        int left = 1, right = nums.size();
        while(left < right){
            int mid = (right - left)/2 +1;
            int count1 = 0;
            for(int i=0; i< nums.size(); i++){
                if(nums[i] <= mid) count1++;
            }
            if(count1 <= mid) left = mid+1;
            else
                right = mid;
        }
        return left;
    }
};

/** solution4: Linked list cycle - Floyd's Tortoise and Hare
Time complexity: O(n)
Space complexity: O(1)
**/

class Solution {
public:
    int findDuplicate(vector<int>& nums){
        if(nums.size() > 1){
         //   int slow=nums[0], fast = nums[nums[0]];
            int slow =0, fast = 0;
            while(true){
                slow = nums[slow];
                fast = nums[nums[fast]];
                if(slow == fast) break;
            }
            fast = 0;
            while(fast != slow){
                fast = nums[fast];
                slow = nums[slow];
            }
            return slow;
        }
        return -1;
        
    }
};
