/** Given a binary tree, check whether it is a mirror of itself (ie, symmetric around its center).
*
* For example, this binary tree [1,2,2,3,4,4,3] is symmetric:
*    1
*   / \
*  2   2
* / \ / \
*3  4 4  3
*But the following [1,2,2,null,3,null,3] is not:
*    1
*   / \
*  2   2
*   \   \
*   3    3
*Follow up: Solve it both recursively and iteratively.
**/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
/* Solution Recursive 
  Time complexity: O(n)
  Space complexity: O(n)
 */
 
 
class Solution {
public:
    bool isSymmetric(TreeNode* root) {
        if(!root) return true;
        return subSymmetric(root->left, root->right); 
    }
    
    bool subSymmetric(TreeNode* leftNode, TreeNode* rightNode){
        if(!leftNode && !rightNode) return true;
        if(leftNode && rightNode && leftNode->val == rightNode->val)
            return subSymmetric(leftNode->left, rightNode->right) && subSymmetric(leftNode->right, rightNode->left);
    
        return false;
    }
 
};


