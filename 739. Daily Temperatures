/**  Given a list of daily temperatures T, return a list such that, for each day in the input, tells you how many days you would have to wait until a warmer temperature. If there is no future day for which this is possible, put 0 instead.

**For example, given the list of temperatures T = [73, 74, 75, 71, 69, 72, 76, 73], your output should be [1, 1, 4, 2, 1, 1, 0, 0].

**Note: The length of temperatures will be in the range [1, 30000]. Each temperature will be an integer in the range [30, 100]. 
**/

/** Solution1: TLE 
Time complexity: O(n^2)
Space complexity: O(n)
**/
class Solution1 {
public:
    vector<int> dailyTemperatures(vector<int>& T) {
        vector<int> ans(T.size(), 0); 
        for(int i=0; i<T.size()-1; i++){
            int todayT = T[i];
            for(int j=i+1; j<T.size(); j++){
                if(T[j] > todayT){
                    ans[i] = j-i;
                    break;
                }
            }
        }
        return ans;
    }
};


/** Solution2: 
Time complexity: O(n)
Space complexity: O(n)
**/
class Solution2 {
public:
    vector<int> dailyTemperatures(vector<int>& T) {
        int n = T.size();
        stack<int> s;
        vector<int> ans(n,0);
        for(int i=n-1; i>=0; i--){
            while(!s.empty() && T[i] >= T[s.top()] ) s.pop();
            ans[i] = s.empty()? 0 : s.top()-i;
            s.push(i);
        }
        return ans;
    }
};
