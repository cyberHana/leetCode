/**
Given n non-negative integers a1, a2, ..., an , where each represents a point at coordinate (i, ai). 
n vertical lines are drawn such that the two endpoints of line i is at (i, ai) and (i, 0). 
Find two lines, which together with x-axis forms a container, such that the container contains the most water.

Note: You may not slant the container and n is at least 2.
Example:

Input: [1,8,6,2,5,4,8,3,7]
Output: 49
**/

/** Solution1: Brute Force
Time complexity: O(n^2)
Space complexity: O(1)
**/
class Solution1 {
public:
    int maxArea(vector<int>& height) {
        if(height.size() == 0) return 0;
        int maxarea = 0;
        for(int i=0; i<height.size(); i++){
            for(int j= i+1; j<height.size(); j++){
                maxarea = max(maxarea, min(height[i], height[j])* (j-i));
            }
        }
        return maxarea;
    }
};

/** Solution2: Two Pointer Approach
Time complexity: O(n)
Space complexity: O(1)
**/
class Solution {
public:
    int maxArea(vector<int>& height) {
        int left = 0, right = height.size()-1;
        int maxarea = 0;
        while(left < right){
            int h = min(height[left], height[right]);
            maxarea = max(maxarea, h * (right - left));
            if(height[left] < height[right]){
                left++;
            }else
                right--;
        }
        return maxarea;
    }
};
