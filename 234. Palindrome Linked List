/**
* Given a singly linked list, determine if it is a palindrome.
* Example 1:
* Input: 1->2 
* Output: false
**/ 

/** Solution1: store in a vector 
**   Time complexity: O(n)
**   Space complexity: O(n)
**/ 
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution1 {
public:
    bool isPalindrome(ListNode* head) {
        if(!head || !head->next) return true;
        vector<int> num_;
        while(head){
            num_.push_back(head->val);
            head = head->next;
        }
       
        int size = num_.size();
        for(int i=0; i< size; i++){
            if(num_[i] != num_[size-1-i]) return false;
        }
        
        return true;
    }
};

/** Solution2: reverse the middle half of the link list and compare the front half of the link list
**   Time complexity: O(n)
**   Space complexity: O(`)
**/ 
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    bool isPalindrome(ListNode* head) {
        ListNode *fast = head; 
        ListNode *slow = head;
        while(fast && fast->next){
            fast = fast->next->next;
            slow = slow->next;
        }
        if(fast) slow = slow->next;
        slow = reverse(slow);
        while(slow){
            if(slow->val != head->val) return false;
            slow = slow->next;
            head = head->next;
        }
        return true;
    }
private:
    ListNode* reverse(ListNode* cur){
        ListNode *prev = NULL; 
        ListNode *next = NULL;
        while(cur){
            next = cur->next;
            cur->next = prev;
            prev = cur;
            cur = next;
        }
        return prev;
    }
};
