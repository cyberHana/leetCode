/**
* You are climbing a stair case. It takes n steps to reach to the top.
* Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?
* Note: Given n will be a positive integer.

* Example 1:
* Input: 2
* Output: 2
* Explanation: There are two ways to climb to the top.
* 1. 1 step + 1 step
* 2. 2 steps
**/

/* Solution: Dynamic Programming
* Taking a single step from (i−1)th step.
* Taking a step of 222 from (i−2)th step.
* dp[i]=dp[i−1]+dp[i−2]
* Time complexity : O(n). Single loop upto nnn.
* Space complexity : O(n). dp array of size n is used
**/ 

class Solution {
public:
    int climbStairs(int n) {
        if(n==1 || n==0) return n;
        
        vector<int>fib(n+1);
        fib[1] = 1; 
        fib[2] = 2;
        for(int i=3; i<=n; i++) fib[i] = fib[i-1]+fib[i-2];
        return fib[n];
    }
    
};
