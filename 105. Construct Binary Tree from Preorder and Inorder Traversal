/***
Given preorder and inorder traversal of a tree, construct the binary tree.

Note:
You may assume that duplicates do not exist in the tree.

For example, given

preorder = [3,9,20,15,7]
inorder = [9,3,15,20,7]

Return the following binary tree:

    3
   / \
  9  20
    /  \
   15   7
***/

/** Solution: recusive
Time complexity: O(n)
Space complexity: O(n)
**/


/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */

class Solution {
public:
    TreeNode* buildTree(vector<int> preorder, vector<int> inorder) {
        if(preorder.empty() || inorder.empty() || preorder.size()!=inorder.size()) return NULL;
        
        TreeNode* root = new TreeNode(preorder[0]);
        if(preorder.size()!=1){
            int pivot = find(inorder, preorder[0]);
            if(pivot == -1) return NULL;
            root->left = buildTree(vector<int>(preorder.begin()+1, preorder.begin()+pivot+1),
                                  vector<int>(inorder.begin(), inorder.begin()+pivot));
            root->right = buildTree(vector<int>(preorder.begin()+pivot+1, preorder.end() ),
                                   vector<int>(inorder.begin()+pivot+1, inorder.end()));
        }
        return root;
    }
    
    int find(vector<int>& inorder, int target){
        for(int i=0; i<inorder.size(); i++)
            if(inorder[i] == target)
                return i;
        return -1;
    }
    
};
