/**
Merge k sorted linked lists and return it as one sorted list. Analyze and describe its complexity.

Example:

Input:
[
  1->4->5,
  1->3->4,
  2->6
]
Output: 1->1->2->3->4->4->5->6

**/
/** Solution1: Optimize Approach 2 by Priority Queue
Time complexity : 
 O(Nlog⁡k) where kthe number of linked lists.
    The comparison cost will be reduced to O(log⁡k) for every pop and insertion to priority queue.
    But finding the node with the smallest value just costs O(1)O(1)O(1) time.
    There are N nodes in the final linked list.
Space complexity:   Creating a new linked list costs O(n) space
**/
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution1 {
public:
    ListNode* mergeKLists(vector<ListNode*>& lists) {
        ListNode dummy(0);
        ListNode* tail = &dummy;
        
        auto cmp=[](ListNode* a, ListNode* b){ return a->val > b->val;};
        priority_queue<ListNode*, vector<ListNode*>, decltype(cmp)> q(cmp);
        
        for(auto l:lists){
            if(l) q.push(l);
        }
        while(!q.empty()){
            tail->next = q.top();
            q.pop();
            tail = tail->next;
            if(tail->next) q.push(tail->next);
        }
        return dummy.next;
    }
};
**/
/** Solution2: Merge with Divide And Conquer
Time complexity : 
 O(Nlog⁡k) 
Space complexity:   Creating a new linked list costs O(n) space
**/
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    
    ListNode* mergeKLists(vector<ListNode*>& lists) {
        if(lists.size() ==0) return NULL;
        
        for(int i=0; i<lists.size()-1; i++){
            lists[i+1] = merge2Lists(lists[i], lists[i+1]);
        }
        return lists[lists.size()-1];
    }
   ListNode* merge2Lists(ListNode *l1, ListNode *l2) {
       if (l1 == NULL && l2 == NULL) return NULL; 
       if (l1 == NULL) return l2; 
       if (l2 == NULL) return l1; 
       
       ListNode dummy(0);
       ListNode* tail = &dummy;
        while (l1 != NULL && l2 != NULL) {
            if (l1->val <= l2->val) {
                tail->next = l1; 
                l1 = l1->next; 
            } else if (l2->val < l1->val) {
                tail->next = l2; 
                l2 = l2->next; 
            }
            tail = tail->next; 
        }
        
        if (l1 != NULL) tail->next = l1;
        if (l2 != NULL) tail->next = l2; 
        
        return dummy.next;
    }
};
