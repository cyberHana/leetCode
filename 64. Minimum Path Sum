/** Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right which minimizes the sum of all numbers along its path.

Note: You can only move either down or right at any point in time.

Example:

Input:
[
  [1,3,1],
  [1,5,1],
  [4,2,1]
]
Output: 7
Explanation: Because the path 1→3→1→1→1 minimizes the sum.
**/

/** Solution1: DP
Time complexity: O(mn)
Space complexity: O(mn)-create new array ; or O(1)-using same grid to store the sum
**/

class Solution {
public:
    int minPathSum(vector<vector<int>>& grid) {
        int m = grid.size();
        if (m==0) return 0;
        int n = grid[0].size();
        
        for(int i=0; i<m; i++){
            for( int j =0; j<n; j++){
                if(i==0 && j==0) continue;
                if(i==0) 
                    grid[i][j] += grid[i][j-1];
                else if (j==0) 
                    grid[i][j] += grid[i-1][j];
                else
                    grid[i][j] += min(grid[i][j-1], grid[i-1][j]);
            }
        }
        return grid[m-1][n-1];
    }
    
};


/** Solution2: recursion + memorize
Time complexity: O(mn)
Space complexity: O(mn)
**/
class Solution{
  public:
    int minPathSum(vector<vector<int>>& grid){
        int m = grid.size();
        if (m==0) return 0;
        int n = grid[0].size();
        vector<vector<int>> s_ = vector<vector<int>>(m, vector<int>(n,0));
        return minPathHelper(grid, n-1, m-1, s_);
    }
  private: 
    long minPathHelper(vector<vector<int>>& grid, int x, int y, vector<vector<int>>& s_){
        if(x==0 && y==0) return grid[y][x];
        if(x<0 || y<0) return INT_MAX;
        if( s_[y][x] > 0) return s_[y][x];
        
        int sum = grid[y][x] + min(minPathHelper(grid, x-1 , y ,s_), minPathHelper(grid, x , y-1 ,s_));
        return s_[y][x] = sum;
    }
};
