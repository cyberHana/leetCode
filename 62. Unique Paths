/**
A robot is located at the top-left corner of a m x n grid (marked 'Start' in the diagram below).

The robot can only move either down or right at any point in time. 
The robot is trying to reach the bottom-right corner of the grid (marked 'Finish' in the diagram below).

How many possible unique paths are there?
Example:

Input: m = 7, n = 3
Output: 28

Constraints:
    1 <= m, n <= 100
    It's guaranteed that the answer will be less than or equal to 2 * 10 ^ 9.
**/
/** Solution1: DP
Time complexity: O(mn)
Space complexity: O(mn)
**/

class Solution {
public:
    int uniquePaths(int m, int n) {
        vector<vector<int>> map_ = vector<vector<int>>(m+1, vector<int>(n+1,0));
        for(int i=1; i<=m; i++)
            map_[i][1] = 1;
        
        for(int j=1; j<=n; j++)
            map_[1][j] = 1;
        
        for(int i=1; i<=m; i++){
            for(int j=1; j<=n; j++){
                if(i==1 || j==1) continue;
                map_[i][j] = map_[i-1][j] + map_[i][j-1];
            }
        }
        return map_[m][n];
    }
    
};

/** Solution2: recursion + memorize



class Solution {
public:
    int uniquePaths(int m, int n) {
        if( m<0 || n<0 ) return 0;
        if( m==1 && n ==1 ) return 1;
        if(map_[m][n] > 0) return map_[m][n];
        int leftPath = uniquePaths(m-1, n);
        int topPath = uniquePaths(m, n-1);
        map_[m][n] = leftPath + topPath;
        return map_[m][n];
    }
private:
    unordered_map<int, unordered_map<int, int>>  map_;
    
};
